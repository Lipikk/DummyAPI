{
	"info": {
		"_postman_id": "4f401e11-c5d4-4f52-b312-b3110c218c15",
		"name": "Automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24081392"
	},
	"item": [
		{
			"name": "Post",
			"item": [
				{
					"name": "GetPostList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Check body data is array\", function () {\r",
									"    pm.expect(jsonData.data).to.be.an('array')\r",
									"});\r",
									"\r",
									"pm.test(\"Check body data[0].title is undefined\", function () {\r",
									"    pm.expect(jsonData.data[0].title).to.be.an('undefined')\r",
									"});\r",
									"\r",
									"pm.test(\"Check body data[0].firstName is undefined\", function () {\r",
									"    pm.expect(jsonData.data[0].firstName).to.be.an('undefined')\r",
									"});\r",
									"\r",
									"pm.test(\"Check body data[0].lastName is undefined\", function () {\r",
									"    pm.expect(jsonData.data[0].lastName).to.be.an('undefined')\r",
									"});\r",
									"\r",
									"pm.test(\"Check body data[0].picture is undefined\", function () {\r",
									"    pm.expect(jsonData.data[0].picture).to.be.an('undefined')\r",
									"});\r",
									"\r",
									"pm.test(\"Check body data[0].id is string\", function () {\r",
									"    pm.expect(jsonData.data[0].id).to.be.an('String')\r",
									"});\r",
									"\r",
									"pm.test(\"Check body data[19].id is string\", function () {\r",
									"    pm.expect(jsonData.data[19].id).to.be.an('String')\r",
									"});\r",
									"\r",
									"pm.test(\"Check body data[20] is undefined\", function () {\r",
									"    pm.expect(jsonData.data[20]).to.be.an('undefined')\r",
									"});\r",
									"\r",
									"pm.test(\"Check limit is 20\", function () {\r",
									"    pm.expect(jsonData.limit).to.eql(20);\r",
									"});\r",
									"\r",
									"pm.test(\"Check page is 0\", function () {\r",
									"    pm.expect(jsonData.page).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Check body total is number\", function () {\r",
									"    pm.expect(jsonData.total).to.be.a('number')\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//Пример функции со сложением двух чисел\r",
									"function sumAB(a,b){return a + b};\r",
									"\r",
									"sumAB(10,15)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{api-v}}/post",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{api-v}}",
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreatePost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"postid\", jsonData.id);\r",
									"\r",
									"pm.test(\"test likes\", function () {\r",
									"    pm.expect(jsonData.likes).to.eql(1111);\r",
									"});\r",
									"\r",
									"pm.test(\"test image\", function () {\r",
									"    pm.expect(jsonData.image).to.eql(\"https://givotniymir.ru/wp-content/uploads/2016/12/zolotaya-shinshilla-koshka-opisanie-uxod-i-cena-porody-zolotaya-shinshilla-2.jpg\");\r",
									"});\r",
									"\r",
									"pm.test(\"test tags\", function () {\r",
									"    pm.expect(jsonData.tags).to.eql(['animal', 'kitty', 'goldenchinchilla']);\r",
									"});\r",
									"\r",
									"pm.test(\"test text\", function () {\r",
									"    pm.expect(jsonData.text).to.eql(\"golden chinchilla green eyed cat\");\r",
									"});\r",
									"\r",
									"pm.test(\"test owner.id\", function () {\r",
									"    pm.expect(jsonData.owner.id).to.eql(\"60d0fe4f5311236168a109ca\");\r",
									"});\r",
									"\r",
									"pm.test(\"test owner.title\", function () {\r",
									"    pm.expect(jsonData.owner.title).to.eql(\"ms\");\r",
									"});\r",
									"\r",
									"pm.test(\"test owner.firstName\", function () {\r",
									"    pm.expect(jsonData.owner.firstName).to.eql(\"Sara\");\r",
									"});\r",
									"\r",
									"pm.test(\"test owner.lastName\", function () {\r",
									"    pm.expect(jsonData.owner.lastName).to.eql(\"Andersen\");\r",
									"});\r",
									"\r",
									"pm.test(\"test owner.picture\", function () {\r",
									"    pm.expect(jsonData.owner.picture).to.eql(\"https://randomuser.me/api/portraits/women/58.jpg\");\r",
									"});\r",
									"\r",
									"pm.test(\"test id is string\", function () {\r",
									"    pm.expect(jsonData.id).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"test link is string\", function () {\r",
									"    pm.expect(jsonData.link).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"test publishDate is string\", function () {\r",
									"    pm.expect(jsonData.publishDate).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"test updatedDate is string\", function () {\r",
									"    pm.expect(jsonData.updatedDate).to.be.a('string');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n            \"image\": \"https://givotniymir.ru/wp-content/uploads/2016/12/zolotaya-shinshilla-koshka-opisanie-uxod-i-cena-porody-zolotaya-shinshilla-2.jpg\",\r\n            \"likes\": 1111,\r\n            \"tags\": [\r\n                \"animal\",\r\n                \"kitty\",\r\n                \"goldenchinchilla\"\r\n            ],\r\n            \"text\": \"golden chinchilla green eyed cat\",\r\n            \"owner\": \"60d0fe4f5311236168a109ca\"\r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{api-v}}/post/create",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{api-v}}",
								"post",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPostByID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"postid\", jsonData.id);\r",
									"\r",
									"pm.test(\"test likes\", function () {\r",
									"    pm.expect(jsonData.likes).to.eql(1111);\r",
									"});\r",
									"\r",
									"pm.test(\"test image\", function () {\r",
									"    pm.expect(jsonData.image).to.eql(\"https://givotniymir.ru/wp-content/uploads/2016/12/zolotaya-shinshilla-koshka-opisanie-uxod-i-cena-porody-zolotaya-shinshilla-2.jpg\");\r",
									"});\r",
									"\r",
									"pm.test(\"test tags\", function () {\r",
									"    pm.expect(jsonData.tags).to.eql(['animal', 'kitty', 'goldenchinchilla']);\r",
									"});\r",
									"\r",
									"pm.test(\"test text\", function () {\r",
									"    pm.expect(jsonData.text).to.eql(\"golden chinchilla green eyed cat\");\r",
									"});\r",
									"\r",
									"pm.test(\"test owner.id\", function () {\r",
									"    pm.expect(jsonData.owner.id).to.eql(\"60d0fe4f5311236168a109ca\");\r",
									"});\r",
									"\r",
									"pm.test(\"test owner.title\", function () {\r",
									"    pm.expect(jsonData.owner.title).to.eql(\"ms\");\r",
									"});\r",
									"\r",
									"pm.test(\"test owner.firstName\", function () {\r",
									"    pm.expect(jsonData.owner.firstName).to.eql(\"Sara\");\r",
									"});\r",
									"\r",
									"pm.test(\"test owner.lastName\", function () {\r",
									"    pm.expect(jsonData.owner.lastName).to.eql(\"Andersen\");\r",
									"});\r",
									"\r",
									"pm.test(\"test owner.picture\", function () {\r",
									"    pm.expect(jsonData.owner.picture).to.eql(\"https://randomuser.me/api/portraits/women/58.jpg\");\r",
									"});\r",
									"\r",
									"pm.test(\"test id is string\", function () {\r",
									"    pm.expect(jsonData.id).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"test link is string\", function () {\r",
									"    pm.expect(jsonData.link).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"test publishDate is string\", function () {\r",
									"    pm.expect(jsonData.publishDate).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"test updatedDate is string\", function () {\r",
									"    pm.expect(jsonData.updatedDate).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{api-v}}/post/{{postid}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{api-v}}",
								"post",
								"{{postid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdatePost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1580);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"postid\", jsonData.id);\r",
									"\r",
									"pm.test(\"test likes\", function () {\r",
									"    pm.expect(jsonData.likes).to.eql(2222);\r",
									"});\r",
									"\r",
									"pm.test(\"test image\", function () {\r",
									"    pm.expect(jsonData.image).to.eql(\"https://givotniymir.ru/wp-content/uploads/2016/12/zolotaya-shinshilla-koshka-opisanie-uxod-i-cena-porody-zolotaya-shinshilla-2.jpg\");\r",
									"});\r",
									"\r",
									"pm.test(\"test tags\", function () {\r",
									"    pm.expect(jsonData.tags).to.eql(['animal', 'kitty', 'goldenchinchilla', 'golden chinchilla kittens']);\r",
									"});\r",
									"\r",
									"pm.test(\"test text\", function () {\r",
									"    pm.expect(jsonData.text).to.eql(\"golden chinchilla\");\r",
									"});\r",
									"\r",
									"pm.test(\"test owner.id\", function () {\r",
									"    pm.expect(jsonData.owner.id).to.eql(\"60d0fe4f5311236168a109ca\");\r",
									"});\r",
									"\r",
									"pm.test(\"test owner.title\", function () {\r",
									"    pm.expect(jsonData.owner.title).to.eql(\"ms\");\r",
									"});\r",
									"\r",
									"pm.test(\"test owner.firstName\", function () {\r",
									"    pm.expect(jsonData.owner.firstName).to.eql(\"Sara\");\r",
									"});\r",
									"\r",
									"pm.test(\"test owner.lastName\", function () {\r",
									"    pm.expect(jsonData.owner.lastName).to.eql(\"Andersen\");\r",
									"});\r",
									"\r",
									"pm.test(\"test owner.picture\", function () {\r",
									"    pm.expect(jsonData.owner.picture).to.eql(\"https://randomuser.me/api/portraits/women/58.jpg\");\r",
									"});\r",
									"\r",
									"pm.test(\"test id is string\", function () {\r",
									"    pm.expect(jsonData.id).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"test link is string\", function () {\r",
									"    pm.expect(jsonData.link).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"test publishDate is string\", function () {\r",
									"    pm.expect(jsonData.publishDate).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"test updatedDate is string\", function () {\r",
									"    pm.expect(jsonData.updatedDate).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n            \"likes\": 2222,\r\n            \"tags\": [\r\n                \"animal\",\r\n                \"kitty\",\r\n                \"goldenchinchilla\",\r\n                \"golden chinchilla kittens\"\r\n            ],\r\n            \"text\": \"golden chinchilla\",\r\n            \"owner\": \"60d0fe4f5311236168a109ca\"\r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{api-v}}/post/{{postid}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{api-v}}",
								"post",
								"{{postid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeletePost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"postid\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{api-v}}/post/{{postid}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{api-v}}",
								"post",
								"{{postid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "GetUserList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Check body data is array\", function () {\r",
									"    pm.expect(jsonData.data).to.be.an('array')\r",
									"});\r",
									"\r",
									"pm.test(\"Check body data[0].id is string\", function () {\r",
									"    pm.expect(jsonData.data[0].id).to.be.an('String')\r",
									"});\r",
									"\r",
									"pm.test(\"Check body data[0].email is undefined\", function () {\r",
									"    pm.expect(jsonData.data[0].email).to.be.an('undefined')\r",
									"});\r",
									"\r",
									"pm.test(\"Check body data[19].id is string\", function () {\r",
									"    pm.expect(jsonData.data[19].id).to.be.an('String')\r",
									"});\r",
									"\r",
									"pm.test(\"Check body data[20] is undefined\", function () {\r",
									"    pm.expect(jsonData.data[20]).to.be.an('undefined')\r",
									"});\r",
									"\r",
									"pm.test(\"Check limit is 20\", function () {\r",
									"    pm.expect(jsonData.limit).to.eql(20);\r",
									"});\r",
									"\r",
									"pm.test(\"Check page is 0\", function () {\r",
									"    pm.expect(jsonData.page).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Check body total is number\", function () {\r",
									"    pm.expect(jsonData.total).to.be.a('number')\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{api-v}}/user",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{api-v}}",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"userId\", jsonData.id);\r",
									"\r",
									"pm.test(\"Check body title\", function () {\r",
									"    pm.expect(jsonData.title).to.eql(\"mr\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body firstName\", function () {\r",
									"    pm.expect(jsonData.firstName).to.eql(\"Ив\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body lastName\", function () {\r",
									"    pm.expect(jsonData.lastName).to.eql(\"Он\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body picture\", function () {\r",
									"    pm.expect(jsonData.picture).to.eql(\"https://randomuser.me/api/portraits/med/men/23.jpg\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body gender\", function () {\r",
									"    pm.expect(jsonData.gender).to.eql(\"male\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body dateOfBirth\", function () {\r",
									"    pm.expect(jsonData.dateOfBirth).to.eql(\"1964-12-08T00:00:00.000Z\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body phone\", function () {\r",
									"    pm.expect(jsonData.phone).to.eql(\"(999)-854-5524\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body location.street\", function () {\r",
									"    pm.expect(jsonData.location.street).to.eql(\"Нагорная\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body location.city\", function () {\r",
									"    pm.expect(jsonData.location.city).to.eql(\"Москва\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body location.state\", function () {\r",
									"    pm.expect(jsonData.location.state).to.eql(\"Московская область\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body location.country\", function () {\r",
									"    pm.expect(jsonData.location.country).to.eql(\"Россия\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body location.timezone\", function () {\r",
									"    pm.expect(jsonData.location.timezone).to.eql(\"+4:00\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body email is string\", function () {\r",
									"    pm.expect(jsonData.email).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check body id is string\", function () {\r",
									"    pm.expect(jsonData.id).to.be.a('string')\r",
									"});\r",
									"\r",
									"pm.test(\"Check body registerDate is string\", function () {\r",
									"    pm.expect(jsonData.registerDate).to.be.a('string')\r",
									"});\r",
									"\r",
									"pm.test(\"Check body updatedDate is string\", function () {\r",
									"    pm.expect(jsonData.updatedDate).to.be.a('string')\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"firstName\": \"Ив\",\r\n    \"lastName\": \"Он\",\r\n    \"picture\": \"https://randomuser.me/api/portraits/med/men/23.jpg\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"dateOfBirth\": \"1964-12-08\",\r\n    \"phone\": \"(999)-854-5524\",\r\n    \"location\": {\r\n        \"street\": \"Нагорная\",\r\n        \"city\": \"Москва\",\r\n        \"state\": \"Московская область\",\r\n        \"country\": \"Россия\",\r\n        \"timezone\": \"+4:00\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{api-v}}/user/create",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{api-v}}",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserByID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check body id\", function () {\r",
									"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"userId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check body title\", function () {\r",
									"    pm.expect(jsonData.title).to.eql(\"mr\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body firstName\", function () {\r",
									"    pm.expect(jsonData.firstName).to.eql(\"Ив\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body lastName\", function () {\r",
									"    pm.expect(jsonData.lastName).to.eql(\"Он\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body picture\", function () {\r",
									"    pm.expect(jsonData.picture).to.eql(\"https://randomuser.me/api/portraits/med/men/23.jpg\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body gender\", function () {\r",
									"    pm.expect(jsonData.gender).to.eql(\"male\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body email\", function () {\r",
									"    pm.expect(jsonData.email).to.be.a('string')\r",
									"});\r",
									"\r",
									"pm.test(\"Check body dateOfBirth\", function () {\r",
									"    pm.expect(jsonData.dateOfBirth).to.eql(\"1964-12-08T00:00:00.000Z\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body phone\", function () {\r",
									"    pm.expect(jsonData.phone).to.eql(\"(999)-854-5524\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body location.street\", function () {\r",
									"    pm.expect(jsonData.location.street).to.eql(\"Нагорная\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body location.city\", function () {\r",
									"    pm.expect(jsonData.location.city).to.eql(\"Москва\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body location.state\", function () {\r",
									"    pm.expect(jsonData.location.state).to.eql(\"Московская область\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body location.country\", function () {\r",
									"    pm.expect(jsonData.location.country).to.eql(\"Россия\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body location.timezone\", function () {\r",
									"    pm.expect(jsonData.location.timezone).to.eql(\"+4:00\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body id is registerDate\", function () {\r",
									"    pm.expect(jsonData.registerDate).to.be.a('string')\r",
									"});\r",
									"\r",
									"pm.test(\"Check body id is updatedDate\", function () {\r",
									"    pm.expect(jsonData.updatedDate).to.be.a('string')\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{api-v}}/user/{{userId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{api-v}}",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"userId\", jsonData.id);\r",
									"\r",
									"\r",
									"pm.test(\"Check body id is string\", function () {\r",
									"    pm.expect(jsonData.id).to.be.a('string')\r",
									"});\r",
									"\r",
									"pm.test(\"Check body title\", function () {\r",
									"    pm.expect(jsonData.title).to.eql(\"mr\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body firstName\", function () {\r",
									"    pm.expect(jsonData.firstName).to.eql(\"Петр\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body lastName\", function () {\r",
									"    pm.expect(jsonData.lastName).to.eql(\"Иванов\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body picture\", function () {\r",
									"    pm.expect(jsonData.picture).to.eql(\"https://randomuser.me/api/portraits/med/men/23.jpg\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body gender\", function () {\r",
									"    pm.expect(jsonData.gender).to.eql(\"male\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body email\", function () {\r",
									"    pm.expect(jsonData.email).to.be.a('string')\r",
									"});\r",
									"\r",
									"pm.test(\"Check body dateOfBirth\", function () {\r",
									"    pm.expect(jsonData.dateOfBirth).to.eql(\"1964-12-08T00:00:00.000Z\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body phone\", function () {\r",
									"    pm.expect(jsonData.phone).to.eql(\"(999)-854-5524\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body location.street\", function () {\r",
									"    pm.expect(jsonData.location.street).to.eql(\"Нагорная\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body location.city\", function () {\r",
									"    pm.expect(jsonData.location.city).to.eql(\"Москва\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body location.state\", function () {\r",
									"    pm.expect(jsonData.location.state).to.eql(\"Московская область\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body location.country\", function () {\r",
									"    pm.expect(jsonData.location.country).to.eql(\"Россия\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body location.timezone\", function () {\r",
									"    pm.expect(jsonData.location.timezone).to.eql(\"+4:00\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check body id is registerDate\", function () {\r",
									"    pm.expect(jsonData.registerDate).to.be.a('string')\r",
									"});\r",
									"\r",
									"pm.test(\"Check body id is updatedDate\", function () {\r",
									"    pm.expect(jsonData.updatedDate).to.be.a('string')\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"firstName\": \"Петр\",\r\n    \"lastName\": \"Иванов\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{api-v}}/user/{{userId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{api-v}}",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"userId\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{api-v}}/user/{{userId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{api-v}}",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}